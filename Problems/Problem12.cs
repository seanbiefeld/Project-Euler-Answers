using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace ProjectEuler.Problems
{
	/// <summary>
	/// The sequence of triangle numbers is generated by adding the natural numbers.
	/// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
	/// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	/// What is the value of the first triangle number to have over five hundred divisors?
	/// </summary>
	public class Problem12 : IProblem
	{
		public string Solve()
		{
			double triangleCounter = 0;
			double prevNumber = 0;
			int max = 1000000;

			//get primes under 1000000
			ICollection<int> primes = Calc.GetAllPrimes(max);
			
			//determine triangle numbers
			while(true)
			{
				triangleCounter = triangleCounter+prevNumber;
				prevNumber++;
				if (triangleCounter > 0)
				{
					var primeFactors = new Collection<int>();

					var workingTriangleCounter = triangleCounter;
					foreach (var prime in primes)
					{
						while (workingTriangleCounter % prime == 0)
						{
							workingTriangleCounter /= prime;
							primeFactors.Add(prime);
						}

						if (workingTriangleCounter == 1)
						{
							//group like prime factors to determine exponent
							var grouped =
								from pf in primeFactors
								group pf by pf;

							var factorCount = 1;
							
							//add one to each exponent
							//then multiply exponents
							foreach (var group in grouped)
							{
								factorCount *= group.Count()+1;
							}

							if(factorCount > 500)
							{
								return triangleCounter.ToString();
							}

							break;
						}
					}
				}
			}
		}
	}
}
